// Code generated by github.com/ecordell/optgen. DO NOT EDIT.
package server

import (
	datastore "github.com/authzed/spicedb/pkg/cmd/datastore"
	util "github.com/authzed/spicedb/pkg/cmd/util"
	grpc "google.golang.org/grpc"
	"time"
)

type ServerConfigOption func(s *ServerConfig)

// NewServerConfigWithOptions creates a new ServerConfig with the passed in options set
func NewServerConfigWithOptions(opts ...ServerConfigOption) *ServerConfig {
	s := &ServerConfig{}
	for _, o := range opts {
		o(s)
	}
	return s
}

// ServerConfigWithOptions configures an existing ServerConfig with the passed in options set
func ServerConfigWithOptions(s *ServerConfig, opts ...ServerConfigOption) *ServerConfig {
	for _, o := range opts {
		o(s)
	}
	return s
}

// WithGRPCServer returns an option that can set GRPCServer on a ServerConfig
func WithGRPCServer(gRPCServer util.GRPCServerConfig) ServerConfigOption {
	return func(s *ServerConfig) {
		s.GRPCServer = gRPCServer
	}
}

// WithPresharedKey returns an option that can set PresharedKey on a ServerConfig
func WithPresharedKey(presharedKey string) ServerConfigOption {
	return func(s *ServerConfig) {
		s.PresharedKey = presharedKey
	}
}

// WithShutdownGracePeriod returns an option that can set ShutdownGracePeriod on a ServerConfig
func WithShutdownGracePeriod(shutdownGracePeriod time.Duration) ServerConfigOption {
	return func(s *ServerConfig) {
		s.ShutdownGracePeriod = shutdownGracePeriod
	}
}

// WithHTTPGateway returns an option that can set HTTPGateway on a ServerConfig
func WithHTTPGateway(hTTPGateway util.HTTPServerConfig) ServerConfigOption {
	return func(s *ServerConfig) {
		s.HTTPGateway = hTTPGateway
	}
}

// WithHTTPGatewayUpstreamAddr returns an option that can set HTTPGatewayUpstreamAddr on a ServerConfig
func WithHTTPGatewayUpstreamAddr(hTTPGatewayUpstreamAddr string) ServerConfigOption {
	return func(s *ServerConfig) {
		s.HTTPGatewayUpstreamAddr = hTTPGatewayUpstreamAddr
	}
}

// WithHTTPGatewayUpstreamTLSCertPath returns an option that can set HTTPGatewayUpstreamTLSCertPath on a ServerConfig
func WithHTTPGatewayUpstreamTLSCertPath(hTTPGatewayUpstreamTLSCertPath string) ServerConfigOption {
	return func(s *ServerConfig) {
		s.HTTPGatewayUpstreamTLSCertPath = hTTPGatewayUpstreamTLSCertPath
	}
}

// WithHTTPGatewayCorsEnabled returns an option that can set HTTPGatewayCorsEnabled on a ServerConfig
func WithHTTPGatewayCorsEnabled(hTTPGatewayCorsEnabled bool) ServerConfigOption {
	return func(s *ServerConfig) {
		s.HTTPGatewayCorsEnabled = hTTPGatewayCorsEnabled
	}
}

// WithHTTPGatewayCorsAllowedOrigins returns an option that can append HTTPGatewayCorsAllowedOriginss to ServerConfig.HTTPGatewayCorsAllowedOrigins
func WithHTTPGatewayCorsAllowedOrigins(hTTPGatewayCorsAllowedOrigins string) ServerConfigOption {
	return func(s *ServerConfig) {
		s.HTTPGatewayCorsAllowedOrigins = append(s.HTTPGatewayCorsAllowedOrigins, hTTPGatewayCorsAllowedOrigins)
	}
}

// SetHTTPGatewayCorsAllowedOrigins returns an option that can set HTTPGatewayCorsAllowedOrigins on a ServerConfig
func SetHTTPGatewayCorsAllowedOrigins(hTTPGatewayCorsAllowedOrigins []string) ServerConfigOption {
	return func(s *ServerConfig) {
		s.HTTPGatewayCorsAllowedOrigins = hTTPGatewayCorsAllowedOrigins
	}
}

// WithDatastore returns an option that can set Datastore on a ServerConfig
func WithDatastore(datastore datastore.DatastoreConfig) ServerConfigOption {
	return func(s *ServerConfig) {
		s.Datastore = datastore
	}
}

// WithNamespaceCacheExpiration returns an option that can set NamespaceCacheExpiration on a ServerConfig
func WithNamespaceCacheExpiration(namespaceCacheExpiration time.Duration) ServerConfigOption {
	return func(s *ServerConfig) {
		s.NamespaceCacheExpiration = namespaceCacheExpiration
	}
}

// WithSchemaPrefixesRequired returns an option that can set SchemaPrefixesRequired on a ServerConfig
func WithSchemaPrefixesRequired(schemaPrefixesRequired bool) ServerConfigOption {
	return func(s *ServerConfig) {
		s.SchemaPrefixesRequired = schemaPrefixesRequired
	}
}

// WithDispatchServer returns an option that can set DispatchServer on a ServerConfig
func WithDispatchServer(dispatchServer util.GRPCServerConfig) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DispatchServer = dispatchServer
	}
}

// WithDispatchMaxDepth returns an option that can set DispatchMaxDepth on a ServerConfig
func WithDispatchMaxDepth(dispatchMaxDepth uint32) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DispatchMaxDepth = dispatchMaxDepth
	}
}

// WithDispatchUpstreamAddr returns an option that can set DispatchUpstreamAddr on a ServerConfig
func WithDispatchUpstreamAddr(dispatchUpstreamAddr string) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DispatchUpstreamAddr = dispatchUpstreamAddr
	}
}

// WithDispatchUpstreamCAPath returns an option that can set DispatchUpstreamCAPath on a ServerConfig
func WithDispatchUpstreamCAPath(dispatchUpstreamCAPath string) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DispatchUpstreamCAPath = dispatchUpstreamCAPath
	}
}

// WithDisableV1SchemaAPI returns an option that can set DisableV1SchemaAPI on a ServerConfig
func WithDisableV1SchemaAPI(disableV1SchemaAPI bool) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DisableV1SchemaAPI = disableV1SchemaAPI
	}
}

// WithDashboardAPI returns an option that can set DashboardAPI on a ServerConfig
func WithDashboardAPI(dashboardAPI util.HTTPServerConfig) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DashboardAPI = dashboardAPI
	}
}

// WithMetricsAPI returns an option that can set MetricsAPI on a ServerConfig
func WithMetricsAPI(metricsAPI util.HTTPServerConfig) ServerConfigOption {
	return func(s *ServerConfig) {
		s.MetricsAPI = metricsAPI
	}
}

// WithUnaryMiddleware returns an option that can append UnaryMiddlewares to ServerConfig.UnaryMiddleware
func WithUnaryMiddleware(unaryMiddleware grpc.UnaryServerInterceptor) ServerConfigOption {
	return func(s *ServerConfig) {
		s.UnaryMiddleware = append(s.UnaryMiddleware, unaryMiddleware)
	}
}

// SetUnaryMiddleware returns an option that can set UnaryMiddleware on a ServerConfig
func SetUnaryMiddleware(unaryMiddleware []grpc.UnaryServerInterceptor) ServerConfigOption {
	return func(s *ServerConfig) {
		s.UnaryMiddleware = unaryMiddleware
	}
}

// WithStreamingMiddleware returns an option that can append StreamingMiddlewares to ServerConfig.StreamingMiddleware
func WithStreamingMiddleware(streamingMiddleware grpc.StreamServerInterceptor) ServerConfigOption {
	return func(s *ServerConfig) {
		s.StreamingMiddleware = append(s.StreamingMiddleware, streamingMiddleware)
	}
}

// SetStreamingMiddleware returns an option that can set StreamingMiddleware on a ServerConfig
func SetStreamingMiddleware(streamingMiddleware []grpc.StreamServerInterceptor) ServerConfigOption {
	return func(s *ServerConfig) {
		s.StreamingMiddleware = streamingMiddleware
	}
}

// WithDispatchUnaryMiddleware returns an option that can append DispatchUnaryMiddlewares to ServerConfig.DispatchUnaryMiddleware
func WithDispatchUnaryMiddleware(dispatchUnaryMiddleware grpc.UnaryServerInterceptor) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DispatchUnaryMiddleware = append(s.DispatchUnaryMiddleware, dispatchUnaryMiddleware)
	}
}

// SetDispatchUnaryMiddleware returns an option that can set DispatchUnaryMiddleware on a ServerConfig
func SetDispatchUnaryMiddleware(dispatchUnaryMiddleware []grpc.UnaryServerInterceptor) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DispatchUnaryMiddleware = dispatchUnaryMiddleware
	}
}

// WithDispatchStreamingMiddleware returns an option that can append DispatchStreamingMiddlewares to ServerConfig.DispatchStreamingMiddleware
func WithDispatchStreamingMiddleware(dispatchStreamingMiddleware grpc.StreamServerInterceptor) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DispatchStreamingMiddleware = append(s.DispatchStreamingMiddleware, dispatchStreamingMiddleware)
	}
}

// SetDispatchStreamingMiddleware returns an option that can set DispatchStreamingMiddleware on a ServerConfig
func SetDispatchStreamingMiddleware(dispatchStreamingMiddleware []grpc.StreamServerInterceptor) ServerConfigOption {
	return func(s *ServerConfig) {
		s.DispatchStreamingMiddleware = dispatchStreamingMiddleware
	}
}
